!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
App_C_Flags	Makefile	/^App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)$/;"	m
App_Cpp_Files	Makefile	/^App_Cpp_Files := App\/App.cpp $(wildcard App\/Edger8rSyntax\/*.cpp) $(wildcard App\/TrustedLibrary\/*.cpp)$/;"	m
App_Cpp_Flags	Makefile	/^App_Cpp_Flags := $(App_C_Flags) -std=c++11$/;"	m
App_Cpp_Objects	Makefile	/^App_Cpp_Objects := $(App_Cpp_Files:.cpp=.o)$/;"	m
App_Include_Paths	Makefile	/^App_Include_Paths := -IInclude -IApp -I$(SGX_SDK)\/include$/;"	m
App_Link_Flags	Makefile	/^App_Link_Flags := $(SGX_COMMON_CFLAGS) -L$(SGX_LIBRARY_PATH) -l$(Urts_Library_Name) -lpthread $/;"	m
App_Name	Makefile	/^App_Name := app$/;"	m
BUFFER_SIZE	Enclave/TrustedLibrary/Thread.cpp	41;"	d	file:
Build_Mode	Makefile	/^	Build_Mode = HW_DEBUG$/;"	m
Build_Mode	Makefile	/^	Build_Mode = HW_PRERELEASE$/;"	m
Build_Mode	Makefile	/^	Build_Mode = HW_RELEASE$/;"	m
Build_Mode	Makefile	/^	Build_Mode = SIM_DEBUG$/;"	m
Build_Mode	Makefile	/^	Build_Mode = SIM_PRERELEASE$/;"	m
Build_Mode	Makefile	/^	Build_Mode = SIM_RELEASE$/;"	m
Crypto_Library_Name	Makefile	/^Crypto_Library_Name := sgx_tcrypto$/;"	m
ENCLAVE_FILENAME	App/App.h	53;"	d
Enclave_C_Flags	Makefile	/^Enclave_C_Flags := $(SGX_COMMON_CFLAGS) -nostdinc -fvisibility=hidden -fpie -fstack-protector $(Enclave_Include_Paths)$/;"	m
Enclave_Config_File	Makefile	/^Enclave_Config_File := Enclave\/Enclave.config.xml$/;"	m
Enclave_Cpp_Files	Makefile	/^Enclave_Cpp_Files := Enclave\/Enclave.cpp $(wildcard Enclave\/Edger8rSyntax\/*.cpp) $(wildcard Enclave\/TrustedLibrary\/*.cpp)$/;"	m
Enclave_Cpp_Flags	Makefile	/^Enclave_Cpp_Flags := $(Enclave_C_Flags) -std=c++03 -nostdinc++$/;"	m
Enclave_Cpp_Objects	Makefile	/^Enclave_Cpp_Objects := $(Enclave_Cpp_Files:.cpp=.o)$/;"	m
Enclave_Include_Paths	Makefile	/^Enclave_Include_Paths := -IInclude -IEnclave -I$(SGX_SDK)\/include -I$(SGX_SDK)\/include\/tlibc -I$(SGX_SDK)\/include\/stlport$/;"	m
Enclave_Link_Flags	Makefile	/^Enclave_Link_Flags := $(SGX_COMMON_CFLAGS) -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \\$/;"	m
Enclave_Name	Makefile	/^Enclave_Name := enclave.so$/;"	m
FALSE	App/App.h	49;"	d
LOOPS_PER_THREAD	Include/user_types.h	36;"	d
MAX_PATH	App/App.cpp	39;"	d	file:
SGX_ARCH	Makefile	/^	SGX_ARCH := x86$/;"	m
SGX_ARCH	Makefile	/^SGX_ARCH ?= x64$/;"	m
SGX_COMMON_CFLAGS	Makefile	/^	SGX_COMMON_CFLAGS := -m32$/;"	m
SGX_COMMON_CFLAGS	Makefile	/^	SGX_COMMON_CFLAGS := -m64$/;"	m
SGX_DEBUG	Makefile	/^SGX_DEBUG ?= 1$/;"	m
SGX_EDGER8R	Makefile	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x64\/sgx_edger8r$/;"	m
SGX_EDGER8R	Makefile	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x86\/sgx_edger8r$/;"	m
SGX_ENCLAVE_SIGNER	Makefile	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x64\/sgx_sign$/;"	m
SGX_ENCLAVE_SIGNER	Makefile	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x86\/sgx_sign$/;"	m
SGX_LIBRARY_PATH	Makefile	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib$/;"	m
SGX_LIBRARY_PATH	Makefile	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib64$/;"	m
SGX_MODE	Makefile	/^SGX_MODE ?= HW$/;"	m
SGX_SDK	Makefile	/^SGX_SDK ?= \/opt\/intel\/sgxsdk$/;"	m
Service_Library_Name	Makefile	/^	Service_Library_Name := sgx_tservice$/;"	m
Service_Library_Name	Makefile	/^	Service_Library_Name := sgx_tservice_sim$/;"	m
Signed_Enclave_Name	Makefile	/^Signed_Enclave_Name := enclave.signed.so$/;"	m
TOKEN_FILENAME	App/App.h	52;"	d
TRUE	App/App.h	45;"	d
Trts_Library_Name	Makefile	/^	Trts_Library_Name := sgx_trts$/;"	m
Trts_Library_Name	Makefile	/^	Trts_Library_Name := sgx_trts_sim$/;"	m
ULP	Enclave/Edger8rSyntax/Types.cpp	44;"	d	file:
UNUSED	Enclave/Edger8rSyntax/Types.cpp	42;"	d	file:
Urts_Library_Name	Makefile	/^	Urts_Library_Name := sgx_urts$/;"	m
Urts_Library_Name	Makefile	/^	Urts_Library_Name := sgx_urts_sim$/;"	m
_APP_H_	App/App.h	34;"	d
_ENCLAVE_H_	Enclave/Enclave.h	34;"	d
_sgx_errlist_t	App/App.cpp	/^typedef struct _sgx_errlist_t {$/;"	s	file:
almost_equal	Enclave/Edger8rSyntax/Types.cpp	/^bool  almost_equal(double x, double y)$/;"	f
almost_equal	Enclave/Edger8rSyntax/Types.cpp	/^bool  almost_equal(float x, float y)$/;"	f
array_t	Include/user_types.h	/^typedef int array_t[10];$/;"	t
buf	Enclave/TrustedLibrary/Thread.cpp	/^    int buf[BUFFER_SIZE];$/;"	m	struct:__anon1	file:
buffer	Enclave/TrustedLibrary/Thread.cpp	/^static cond_buffer_t buffer = {{0, 0, 0, 0, 0, 0}, 0, 0, 0,$/;"	v	file:
buffer_t	Include/user_types.h	/^typedef void *buffer_t;$/;"	t
checksum_internal	Enclave/Edger8rSyntax/Pointers.cpp	/^int32_t checksum_internal(char *buf, size_t count)$/;"	f
cond_buffer_t	Enclave/TrustedLibrary/Thread.cpp	/^} cond_buffer_t;$/;"	t	typeref:struct:__anon1	file:
counter	App/TrustedLibrary/Thread.cpp	/^static size_t counter = 0;$/;"	v	file:
data_consumer	App/TrustedLibrary/Thread.cpp	/^void data_consumer(void)$/;"	f
data_producer	App/TrustedLibrary/Thread.cpp	/^void data_producer(void)$/;"	f
ecall_array_in	Enclave/Edger8rSyntax/Arrays.cpp	/^void ecall_array_in(int arr[4])$/;"	f
ecall_array_in_out	Enclave/Edger8rSyntax/Arrays.cpp	/^void ecall_array_in_out(int arr[4])$/;"	f
ecall_array_isary	Enclave/Edger8rSyntax/Arrays.cpp	/^void ecall_array_isary(array_t arr)$/;"	f
ecall_array_out	Enclave/Edger8rSyntax/Arrays.cpp	/^void ecall_array_out(int arr[4])$/;"	f
ecall_array_user_check	Enclave/Edger8rSyntax/Arrays.cpp	/^void ecall_array_user_check(int arr[4])$/;"	f
ecall_consumer	Enclave/TrustedLibrary/Thread.cpp	/^void ecall_consumer(void)$/;"	f
ecall_exception	Enclave/TrustedLibrary/Libcxx.cpp	/^void ecall_exception(void)$/;"	f
ecall_function_calling_convs	Enclave/Edger8rSyntax/Functions.cpp	/^void ecall_function_calling_convs(void)$/;"	f
ecall_function_private	Enclave/Edger8rSyntax/Functions.cpp	/^int ecall_function_private(void)$/;"	f
ecall_function_public	Enclave/Edger8rSyntax/Functions.cpp	/^void ecall_function_public(void)$/;"	f
ecall_increase_counter	Enclave/TrustedLibrary/Thread.cpp	/^size_t ecall_increase_counter(void)$/;"	f
ecall_libc_functions	App/TrustedLibrary/Libc.cpp	/^void ecall_libc_functions(void)$/;"	f
ecall_libcxx_functions	App/TrustedLibrary/Libcxx.cpp	/^void ecall_libcxx_functions(void)$/;"	f
ecall_malloc_free	Enclave/TrustedLibrary/Libc.cpp	/^void ecall_malloc_free(void)$/;"	f
ecall_map	Enclave/TrustedLibrary/Libcxx.cpp	/^void ecall_map(void)$/;"	f
ecall_pointer_count	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_count(int *arr, int cnt)$/;"	f
ecall_pointer_in	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_in(int *val)$/;"	f
ecall_pointer_in_out	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_in_out(int *val)$/;"	f
ecall_pointer_isptr_readonly	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_isptr_readonly(buffer_t buf, size_t len)$/;"	f
ecall_pointer_out	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_out(int *val)$/;"	f
ecall_pointer_size	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_size(void *ptr, size_t len)$/;"	f
ecall_pointer_sizefunc	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_sizefunc(char *buf)$/;"	f
ecall_pointer_string	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_string(char *str)$/;"	f
ecall_pointer_string_const	Enclave/Edger8rSyntax/Pointers.cpp	/^void ecall_pointer_string_const(const char *str)$/;"	f
ecall_pointer_user_check	Enclave/Edger8rSyntax/Pointers.cpp	/^size_t ecall_pointer_user_check(void *val, size_t sz)$/;"	f
ecall_producer	Enclave/TrustedLibrary/Thread.cpp	/^void ecall_producer(void)$/;"	f
ecall_sgx_cpuid	Enclave/TrustedLibrary/Libc.cpp	/^void ecall_sgx_cpuid(int cpuinfo[4], int leaf)$/;"	f
ecall_thread_functions	App/TrustedLibrary/Thread.cpp	/^void ecall_thread_functions(void)$/;"	f
ecall_type_char	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_char(char val)$/;"	f
ecall_type_double	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_double(double val)$/;"	f
ecall_type_enum_union	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_enum_union(enum enum_foo_t val1, union union_foo_t *val2)$/;"	f
ecall_type_float	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_float(float val)$/;"	f
ecall_type_int	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_int(int val)$/;"	f
ecall_type_size_t	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_size_t(size_t val)$/;"	f
ecall_type_struct	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_struct(struct struct_foo_t val)$/;"	f
ecall_type_wchar_t	Enclave/Edger8rSyntax/Types.cpp	/^void ecall_type_wchar_t(wchar_t val)$/;"	f
edger8r_array_attributes	App/Edger8rSyntax/Arrays.cpp	/^void edger8r_array_attributes(void)$/;"	f
edger8r_function_attributes	App/Edger8rSyntax/Functions.cpp	/^void edger8r_function_attributes(void)$/;"	f
edger8r_pointer_attributes	App/Edger8rSyntax/Pointers.cpp	/^void edger8r_pointer_attributes(void)$/;"	f
edger8r_type_attributes	App/Edger8rSyntax/Types.cpp	/^void edger8r_type_attributes(void)$/;"	f
err	App/App.cpp	/^    sgx_status_t err;$/;"	m	struct:_sgx_errlist_t	file:
get_buffer_len	Enclave/Edger8rSyntax/Pointers.cpp	/^size_t get_buffer_len(const char* buf)$/;"	f
global_counter	Enclave/TrustedLibrary/Thread.cpp	/^static size_t global_counter = 0;$/;"	v	file:
global_eid	App/App.cpp	/^sgx_enclave_id_t global_eid = 0;$/;"	v
global_mutex	Enclave/TrustedLibrary/Thread.cpp	/^static sgx_thread_mutex_t global_mutex = SGX_THREAD_MUTEX_INITIALIZER;$/;"	v	file:
increase_counter	App/TrustedLibrary/Thread.cpp	/^void increase_counter(void)$/;"	f
initialize_enclave	App/App.cpp	/^int initialize_enclave(void)$/;"	f
less	Enclave/TrustedLibrary/Thread.cpp	/^    sgx_thread_cond_t less;$/;"	m	struct:__anon1	file:
main	App/App.cpp	/^int SGX_CDECL main(int argc, char *argv[])$/;"	f
more	Enclave/TrustedLibrary/Thread.cpp	/^    sgx_thread_cond_t more;$/;"	m	struct:__anon1	file:
msg	App/App.cpp	/^    const char *msg;$/;"	m	struct:_sgx_errlist_t	file:
mutex	Enclave/TrustedLibrary/Thread.cpp	/^    sgx_thread_mutex_t mutex;$/;"	m	struct:__anon1	file:
nextin	Enclave/TrustedLibrary/Thread.cpp	/^    int nextin;$/;"	m	struct:__anon1	file:
nextout	Enclave/TrustedLibrary/Thread.cpp	/^    int nextout;$/;"	m	struct:__anon1	file:
ocall_function_allow	App/Edger8rSyntax/Functions.cpp	/^void ocall_function_allow(void)$/;"	f
ocall_pointer_attr	Enclave/Edger8rSyntax/Pointers.cpp	/^void ocall_pointer_attr(void)$/;"	f
ocall_pointer_in	App/Edger8rSyntax/Pointers.cpp	/^void ocall_pointer_in(int* val)$/;"	f
ocall_pointer_in_out	App/Edger8rSyntax/Pointers.cpp	/^void ocall_pointer_in_out(int* val)$/;"	f
ocall_pointer_out	App/Edger8rSyntax/Pointers.cpp	/^void ocall_pointer_out(int* val)$/;"	f
ocall_pointer_user_check	App/Edger8rSyntax/Pointers.cpp	/^void ocall_pointer_user_check(int* val)$/;"	f
ocall_print_string	App/App.cpp	/^void ocall_print_string(const char *str)$/;"	f
occupied	Enclave/TrustedLibrary/Thread.cpp	/^    int occupied;$/;"	m	struct:__anon1	file:
print_error_message	App/App.cpp	/^void print_error_message(sgx_status_t ret)$/;"	f
printf	Enclave/Enclave.cpp	/^void printf(const char *fmt, ...)$/;"	f
sgx_errlist	App/App.cpp	/^static sgx_errlist_t sgx_errlist[] = {$/;"	v	file:
sgx_errlist_t	App/App.cpp	/^} sgx_errlist_t;$/;"	t	typeref:struct:_sgx_errlist_t	file:
sug	App/App.cpp	/^    const char *sug; \/* Suggestion *\/$/;"	m	struct:_sgx_errlist_t	file:
